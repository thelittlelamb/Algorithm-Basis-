## 4 数学知识

### 质数

1. 质数的判断-试除法

   >注意其中的那一步优化，不推荐`sqrt`(慢)和`i * i <= n`（会溢出）

   ```C++
   bool is_prime(int n){
       if (n < 2) return false;
       for (int i = 2; i <= n / i; i ++){ //该步骤的细节
           if (n % i == 0) return false;
       }
       return true;
   }
   ```

2. 分解质因数

   >根据算术基本定理，不考虑排列顺序的情况下，每个正整数都能够以唯一的方式表示成它的质因数的乘积。
   >$$
   >n=p_1^{a_1} * p_2^{a_2} *p_3^{a_3}.....p_n^{a_n}
   >$$
   >时间复杂度：O($\sqrt[]{n}$)

   ```C++
   int divide(int n){
       for (int i = 2; i <= n / i; i ++){
           if (n % i == 0){
               int count = 0;
               while(n % i == 0){
                   n /= i;
                   count ++;
               }
               printf("%d %d\n", i, count);
           }
       }
       if (n > 1) printf("%d %d\n", n, 1);
   }
   ```

3. 筛质数

   * 直接筛（比较呆，基本不用）

   * 埃氏筛（**思想重要~什么思想**）

     >核心：从2开始筛去素数本身的倍数，向后第一个找到的一定是素数
     >
     >>证明：设第一个找到的是$p$，$2\sim p-1$都没能把$p$筛掉。**$p$无法被小于自身的所有素数整除，推出$p$是素数（L就是第n+1个素数）**。（如果$p$可以被小于自己的某个合数$r$整除，那么$r$可以表示为两个素数的乘积，p也一定能被素数整除
     >
     >复杂度：$O(nloglogn)$

     ```C++
     int is_primes(int n){
         bool isnp[n] = {false};
         int count = 0;
         for (int i = 2; i <= n; i ++){
             if (!isnp[i]){
                 count ++;
                 for (int j = i; j <= n; j += i)
                     isnp[j] = true;
             }
         }
         return count;
     }
     ```

   * 线性筛

     >核心：让每一个合数被其最小质因数筛到
     >
     >>1. 维护一个质数表
     >
     >>2. 从头到尾遍历，第一个数是2，未被划掉，把它放进质数表，然后我们用2去乘质数表里的每个数，划掉它们
     >>3. 划掉的数也要遍历，只是不加入质数表。4：先划掉8，但我们不划掉12
     >
     >>**证明1**：实际上，对于$x$ ，我们遍历到质数表中的$p$，且发现$p|x$时，就应当停止遍历质数表。因为：设$x = pr(r≥p)$（$p$本身是$x$的最小质因数），那么对于任意$p'>p$，有
     >>$$
     >>p'x = pp'r=p(p'r)
     >>$$
     >>，说明$p'x$的最小质因数不是$p'$，我们不应该在此划掉它。
     >
     >>**证明2**：why每一个合数都会被筛过
     >
     >复杂度：$O(n)$

     ```C++
     int is_primes(int n){
         bool isnp[n] = {false};
         int count = 0;
         int primes[n] = {0};
         for (int i = 2; i <= n; i ++){
             if (!isnp[i]) primes[count ++] = i;
             for (int j = 0; primes[j] <= n / i; j ++){//primes[j] * i <= n
                 isnp[primes[j] * i] = true;
                 if (i % primes[j] == 0) break; //虽然两重循环，但是这里很容易break出去
             }
         }
         return count;
     }
     ```

### 约数

1. 试除法求约数

2. 约数个数

   >$$
   >n=p_1^{a_1} * p_2^{a_2} *p_3^{a_3}.....p_n^{a_n}
   >$$
   >
   >$$
   >d = p_1^{b_1} * p_2^{b_2} *p_3^{b_3}.....p_n^{b_n}
   >$$
   >
   >$$
   >0 ≤ b_i ≤ a_i
   >$$
   >
   >所以：**约数个数的公式$(a_1+1)(a_2+1)...(a_n+1)$**

   >代码上的细节：
   >
   >1. `map`存储，**这里采用数组方式插入数据**，例如`primes[1] = 0`
   >
   >2. 每乘一次就取余：`(a * b) % p = (a % p * b % p) % p `
   >
   >  >y总最后没有取余也能过，我为了保险起见还是取余了

   ```c++
   #include <iostream>
   #include<unordered_map>
   const int mod = 1e9 + 7;
   using namespace std;
   typedef long long LL;
   
   int main(){
       int num;
       cin >> num; 
       unordered_map<int, int> primes;
       while(num --){
           int x;
           scanf("%d", &x);
           for (int i = 2; i <= x/i; i++){
               while(x % i == 0){
                   primes[i] ++;
                   x /= i;
               }
           }
           if (x > 1) primes[x] ++;
       }
       LL ans = 1;
       for (auto prime: primes) 
           ans = ans * (prime.second + 1) % mod;
       ans %= mod; //这一步！！
       cout << ans << endl;
   }
   ```

3. 约数之和

   >公式：
   >$$
   >(p_1^0 + p_1^1 + ... p_1^{a_1})(p_2^0 + p_2^1 + ... p_2^{a_2})...(p_k^0 + p_k^1 + ... p_k^{a_k})
   >$$

   >等比数列求和：迭代

   ```c++
   LL ans = 1;
   for (auto prime: primes){
       int temp = 1;
       LL p = prime.first, a = prime.second;
       while(a --) temp = (temp * p + 1) % mod;
       ans = (ans * temp) % mod;
   }
   ans %= mod; //这一步！！
   ```

* 求最大公约数

  >辗转相除法
  >
  >**核心**：gcd(a,b) = gcd(b,a%b)
  >
  >证明：
  >设a%b = a - kb 其中k = a/b(向下取整)
  >若d是(a,b)的公约数：则知 d|a 且 d|b 则易知 d|a-kb 故d也是(b,a%b) 的公约数
  >若d是(b,a%b)的公约数：则知 d|b 且 d|a-kb 则 d|a-kb+kb = d|a 故而d|b 故而 d也是(a,b)的公约数
  >因此(a,b)的公约数集合和(b,a%b)的公约数集合相同，所以他们的最大公约数也相同

  ```C++
  int gcd_1(int x, int y){
      if (x % y == 0) return y;
      else{
          cout << x << ' ' << y << endl;
          return gcd_1(y, x % y);
      } 
  }
  
  int gcd_2(int x, int y){
      return y ? gcd_2(y, x % y): x;
  }
  ```

### 欧拉函数

> 欧拉函数：对于正整数$n$，欧拉函数是小于或等于$n$的正整数中与$n$互质的数的数目，记作$φ(n)$.

>证明：
>
>1. 欧拉函数是乘性函数，当$m,n$互质，$\phi(mn) = \phi(m) * \phi(n)$
>
>2. 根据唯一分解定理知$n=p_1^{a_1} * p_2^{a_2} *p_3^{a_3}.....p_n^{a_n}$。因此$φ(n)=φ(p_1^{a_1})∗…∗φ(p_x^{a_x})$
>
>  > 对于任意一项 $φ(p_s^{a_s})=p_s^{a_s}−p_s^{(a_s-1)}$
>  > 证明：在$1\sim p^k$中只有$p$的倍数与$p^k$不互质
>  >
>  > 所以 $φ(p_s^{a_s})= p_s^{a_s} - p_s^{a_s - 1} = p_s^{a_s}∗(1 − \frac{1}{p_s})$
>
>3. 所以
>
>$$
>  φ(n) =n∗\prod_{i = 1}^{n}(1−\frac{1}{p_i})
>$$

```c++
int phi(int x){
    int res = x;
    for (int i = 2; i <= x / i; i ++){
        if (x % i == 0){
            res = res / i * (i - 1) ; //这个写法，防止小数
            while(x % i == 0) x /= i;
        }
    }
    if (x > 1) res = res / x * (x - 1)  ;
    return res;
}
```

>质数`i`的欧拉函数即为`phi[i] = i - 1`：`1 ~ i−1`均与`i`互质，共`i−1`个
>
>==`phi[primes[j] * i]`分为两种情况：==
>
>1. ` i % primes[j] == 0`时：`primes[j]`是`i`的最小质因子，也是`primes[j] * i`的最小质因子，因此`1 - 1 / primes[j]`这一项在`phi[i]`中计算过了，只需将基数NN修正为`primes[j]`倍，最终结果为`phi[i] * primes[j]`。
>2. `i % primes[j] != 0`：`primes[j]`不是`i`的质因子，只是`primes[j] * i`的最小质因子，因此不仅需要将基数`N`修正为`primes[j]`倍，还需要补上`1 - 1 / primes[j]`这一项，因此最终结果`phi[i] * (primes[j] - 1)`

```c++
void get_euler(int n){
    phi[1] = 1;
    for (int i = 2; i <= n; i ++){
        if (!isnp[i]){
            primes[count ++] = i;
            phi[i] = i - 1;
        } 
        for (int j = 0; primes[j] <= n / i; j ++){//primes[j] * i <= n
            isnp[primes[j] * i] = true;
            if (i % primes[j] == 0) {
                phi[primes[j] * i] = primes[j] * phi[i];
                break; //虽然两重循环，但是这里很容易break出去
            }
            phi[primes[j] * i] = phi[i] * (primes[j] - 1);
        }
    }
}
```

### 快速幂

>基本思路:
>
>1. 预处理出$a^{2^0},a^{2^1},a^{2^2},…,a^{2^{logb}}$这b个数
>
>2. 将$a^b$用$a^{2^0},a^{2^1},a^{2^2},…,a^{2^{logb}}$这b个数来组合，即组合成$a^b=a^{2^{x_1}}×a^{2^{x_2}}×…×a^{2^{x_t}}=a^{2^{x_1}+2^{x_2}+…+2^{x_t}}$，即用二进制表示
>
>  > 为什么$b$可用$a^{2^0},a^{2^1},a^{2^2},…,a^{2^{logb}}$这b个数来表示：二进制可以表示所有数
>
>注意：`b&1`就是判断b的二进制表示中第0位上的数是否为1，若为1，`b&1=true`；反之`b&1=false`

* 快速幂求法

  ```C++
  long long qmi(long long a, int b, int p){
      long long result = 1;
      while(b){
          if (b & 1) result = result * a % p; //判断二进制0号位是不是1
          b >>= 1;
          a = (long long)a * a % p; //这个mod p
      }
      return result % p;
  }
  ```

* 逆元

  >单位元：在一个集合中，对于某种运算$*$（代表通用运算的表示符号），如果对于任何的集合元素$a$和元素$e$运算，得到还是集合元素$a$本身，则称$e$为这个运算下的单位元。
  >
  >逆元：在一个集合中，对于某种运算$*$，如果任意两个元素的运算结果等于单位元，则称这两个元素互为逆元。
  >
  >模乘的单位元：$1(mod n)$
  >
  >模乘的逆元：$aa^{-1}\equiv 1(mod n)$

  >求解
  >
  >1. 模数是质数：费马小定理
  >
  >$$
  >  a^{p-1} \equiv 1(mod\, p)
  >$$
  >
  >$$
  >  a * a^{p-2} \equiv 1(mod \, p)
  >$$
  >
  >$$
  >  x = a^{p-2}(mod\, p)
  >$$
  >
  >  >当$a$为$p$的倍数时，$ax \equiv 0(mod \, p)$，所以一定不存在
  >
  >2. 模数不是质数：扩展欧几里得定理

### 扩展欧几里得算法

>用于求解方程$ax+by=gcd(a,b)$的解
>
>1. 当$b=0$时，$ax+by=a$，故而$x=1,y=0$当
>
>2. $b≠0$时，
>
>$$
>  gcd(a,b)=gcd(b,a\%b)
>$$
>
>  而
>$$
>  bx′+(a\%b)y′=gcd(b,a\%b)
>$$
>
>$$
>  bx′+(a−⌊\frac{a}{b}⌋∗b)y′=gcd(b,a\%b)
>$$
>
>$$
>  ay′+b(x′−⌊\frac{a}{b}⌋y′)=gcd(b,a\%b)=gcd(a,b)
>$$
>
>
>  故而
>$$
>  x=y′, y=x′−⌊\frac{a}{b}⌋∗y′
>$$
>
>  因此可以采取递归算法 先求出下一层的x′和y′再利用上述公式回代即可

```C++
int exgcd(int a, int b, int& x, int& y){//为什么是&,实际上就是址传递,在回溯的过程中改变
    if (b == 0){
        x = 1, y = 0;
        return a;
    }
    //cout << "递归:" << a << ' ' << b << ' ' << x << ' ' << y << endl;
    int gcd = exgcd(b, a % b, x, y);
    //cout << "回溯:" << a << ' ' << b << ' ' << x << ' ' << y << endl;
    int t = x;
    x = y, y = t - a / b * y;
    return gcd; 
}
```

### 中国剩余定理

### 高斯消元

>思想不难，但是算起来非常难算
>
>枚举每一列c，
>
>1. 找到当前列绝对值最大的一行
>2. 用初等行变换(2) 把这一行换到最上面（未确定阶梯型的行，并不是第一行）
>3. 用初等行变换(1) 将该行的第一个数变成 1（其余所有的数字依次跟着变化）
>4. 用初等行变换(3) 将下面所有行的当且列的值变成 0

```c++
#include<iostream>
#include <algorithm>
#include<cmath>
using namespace std;
const int N = 110;
const double eps = 1e-6;
int n;
double a[N][N];

void out(){ //debug代码
    for (int i = 0; i < n; i ++){
        for (int j = 0; j < n + 1; j ++) printf("%.2lf ", a[i][j]);
        cout << endl;
    }
    puts("");
}

int gauss(){
    int curr_row = 0, curr_col = 0;
    for (; curr_col < n; curr_col ++){
        int max_row = curr_row; //找到当前这一列，绝对值最大的一个数字所在的行号
        for (int i = curr_row; i < n; i ++){
            if (fabs(a[i][curr_col]) > fabs(a[max_row][curr_row]))
                max_row = i;
        }
        
        if (fabs(a[max_row][curr_col]) < eps) continue;//这一步
        
        for(int i = curr_col; i < n + 1; i ++) swap(a[curr_row][i], a[max_row][i]);
        for(int i = n; i >= curr_col; i --) a[curr_row][i] /= a[curr_row][curr_col];
        //把下面所有行的第curr_col都消为0
        for(int i = curr_row + 1; i < n; i ++)
            if (fabs(a[i][curr_col]) > eps){
                for (int j = n; j >= curr_col; j --)
                    a[i][j] -= a[curr_row][j] * a[i][curr_col];
            }
        curr_row ++; //本行工作做完，转下一行
    }
    
    if(curr_row < n){
        for (int i = curr_row; i < n; i ++)
            if (fabs(a[i][n]) > eps) return 2;
        return 1;
    }
    //阶梯型回代求解,比较难理解，需要好好思考一下
    for (int i = n - 1; i >= 0; i --)
        for (int j = i + 1; j < n; j ++)
            a[i][n] -= a[i][j] * a[j][n];
    return 0;
}

int main(){
    cin >> n;
    for (int i = 0; i < n; i ++){
        for (int j = 0; j < n + 1; j ++)
            cin >> a[i][j];
    }
    int result = gauss();
    if (result == 0){
        for (int i = 0; i < n; i ++){
            if(fabs(a[i][n]) < eps) puts("0.00"); //防止输出-0.00
            else printf("%.2lf\n", a[i][n]);
        }
    }
    else if (result == 1) puts("Infinite group solutions");
    else puts("No solution");
}
```

### 组合数

* 递推公式法，**适用于a,b都不算大，n很大**

  >`1 ≤ n ≤ 10000`
  >`1 ≤ b ≤ a ≤ 2000`

  ```c++
  int main(){
      int n;
      cin >> n;
      for (int i = 0; i <= 2000; i ++){
          for (int j = 0; j <= i; j ++){
              if (!j) c[i][j] = 1; //一个都不选，只有一种可能
              else c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod; //递推公式
          }
      }
      while(n --){
          int a, b;
          scanf("%d%d", &a, &b);
          printf("%ld\n", c[a][b]);
      }
  }
  ```

* 快速幂

  >1. `fact[i] = (LL)fact[i - 1] * i % mod`: 关于LL 强制转换, 右边的fact[i - 1]会被转换成长整型,这个只是临时的
  >
  >  右边是长整型, 左边接收的是 int, 因为取模所以数值上不会超过int
  >
  >  隐式转化: long long转化成int时会自动取最低的32位
  >
  >2. 公式：
  >
  >$$
  >  C_b^a=\frac{a!}{b!(a−b)!}=a!∗b!^{−1}∗(a−b)!^{−1}
  >$$

  ```C++
  const int N = 1e5 + 2, mod = 1e9 + 7;
  int fact[N], infact[N];
  
  int main(){
      fact[0] = infact[0] = 1;
      for (int i = 1; i < N; i ++){
          fact[i] = (long long)fact[i - 1] * i % mod;
          infact[i] = (long long)infact[i - 1] * qmi(i, mod - 2, mod) % mod;
      }
      
      int n;
      cin >> n;
      while (n --){
          int a, b;
          scanf("%d%d", &a, &b);
          printf("%ld\n", (long long)fact[a] * infact[b] % mod * infact[a - b] % mod);
      }
      return 0;
  }
  ```

* 卢卡斯定理：用于处理组合数$C_a^b$，$a, b$特别大，用阶乘处理会越界

  >证明过程：https://www.acwing.com/solution/content/26553/

  ```C++
  int qmi(int a, int b, int p){
      int result_qmi = 1;
      while(b){
          if (b & 1) result_qmi = (LL)result_qmi * a % p;
          //debug技巧：莫名其妙出现负的，说明越界了，加LL
          b >>= 1;
          a = (LL)a * a % p;
      }
      return result_qmi;
  }
  
  int C(int a, int b, int p){
      if (b > a) return 0; //边界条件
      int result = 1;
      for (int i = 1, j = a; i <= b; ++ i, -- j){
          result = (LL)result * j % p;
          result = (LL)result * qmi(i, p - 2, p) % p;
      }
      return result;
  }
  
  LL lucas(LL a, LL b, int p){
      if (a < p && b < p) return C(a, b, p);
      else return (LL)C(a % p, b % p, p) * lucas(a / p, b / p, p) % p;
  }
  ```

* 卡特兰数

  >给定$n$个 $0$ 和$n$个$1$，它们将按照某种顺序排成长度为$2n$的序列，求它们能排列成的所有序列中，能够满足任意前缀序列中$0$的个数都不少于$1$的个数的序列有多少个。答案对$10^9+7$取模
  >
  >解法：将$01$序列置于坐标系中，起点定于原点。若$0$表示向右走，$1$表示向上走，那么任何前缀中$0$的个数不少于$1$的个数就转化为，路径上的任意一点，横坐标大于等于纵坐标。题目所求即为这样的合法路径数量。
  >$$
  >C_{2n}^{n} - C_{2n}^{n - 1} = \frac{C_{2n}^{n}}{n + 1}
  >$$

### 容斥原理

>记$S_i$为$1\sim n$ 中能整除$p_i$的集合,那么根据容斥原理, 所有数的个数为各个集合的并集，计算公式如下
>$$
>⋃_{i=1}^mSi = S_1+…S_m−(S_1⋂S_2+…+S_{m−1}⋂S_m)+(S_1⋂S_2⋂S_3+…+S_{m−2}⋂S_{m−1}⋂S_m)+…+(−1)^{m−1}(⋂_{i=1}^mS)
>$$

>如何用代码表示每个集合的状态？这里使用的**二进制**，以$m = 4$为例，所以需要4个二进制位来表示每一个集合选中与不选的状态，$1101$表示选中集合$S_1,S_2,S_4$，故这个集合中元素的个数为$\frac{n}{p_1∗p_2∗p_4}$。因为集合个数是3个，根据公式，前面的系数为$(−1)^{3−1}=1$

```C++
int main(){
    cin >> n >> m;
    for (int i = 0; i < m; i ++) cin >> primes[i];
    int res = 0;
    for (int i = 1; i < 1 << m; i ++){ //<< 左移运算,向左进行移位操作,高位丢弃,低位补0
    //用二进制表示每一个状态
        int t = 1; //选中集合对应质数的乘积
        int s = 0; //选中的集合数量

        for (int j = 0; j < m; j ++){ //枚举每一个状态
            if (i >> j & 1){
                if ((long long)t * primes[j] > n){
                    t = -1;
                    break; //跳出这个状态
                }
                s ++;
                t *= primes[j];
            }
        }
        if (t == -1) continue; 
        if (s & 1) res += n / t; // s & 1用于判断是奇数还是偶数
        else res -= n / t;
    }
    cout << res << endl;
    return 0;
}
```

### 博弈论

* Nim游戏

  >先手必胜状态：先手操作完，可以走到某一个必败状态
  >先手必败状态：先手操作完，走不到任何一个必败状态
  >先手必败状态：a1 ^ a2 ^ a3 ^ ... ^an = 0
  >先手必胜状态：a1 ^ a2 ^ a3 ^ ... ^an ≠ 0

* 集合类Nim游戏：`sg函数`

  ```C++
  #include <iostream>
  #include <algorithm>
  #include <cstring>
  #include <set>
  using namespace std;
  
  const int N = 110, M = 10010;
  int n_s, n, m;
  int f[M], s[N]; //s存储数字集合, sgf存储每对石子值的sg函数值
  
  int sg(int x){
      if (f[x] != -1) return f[x]; //记忆化搜索,防止重新搜很多遍
      //因为集合是确定的,所以只要x出现在哪里,sg的值都是确定的
      set<int> S; //对于每一个数S都是一个新的集合,定义在函数内部的
      for (int i = 0; i < n_s; i ++){
          if (x >= s[i]) S.insert(sg(x - s[i]));
      }
      for (int i = 0; ; i ++) //看看i是不是在S中
          if (!S.count(i)) return f[x] = i;//return f[x] = i; return值就是i;
  }
  
  using namespace std;
  int main(){
      cin >> n_s;
      for (int i = 0; i < n_s; i ++) cin >> s[i];
      memset(f, -1, sizeof f);
      cin >> n;
      int res = 0;
      for (int i = 0; i < n; i ++){
          int x;
          cin >> x;
          res ^= sg(x);
      }
      res ? puts("Yes"): puts("No");
      return 0;
  }
  ```
